apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-1600353338-postgresql
  labels:
    helm.sh/chart: postgresql-0.1.0
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: postgresql-1600353338
    app.kubernetes.io/version: "9.6"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: postgresql-1600353338
  serviceName: postgresql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: postgresql-1600353338
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        # Postgres db application container that writes log to /var/log/postgres
        - name: postgresql
          securityContext:
            {}
          image: "postgres:9.6"
          args: ["-c", "log_statement=all","-c","log_directory=/var/log/postgres","-c","log_line_prefix=< %m >","-c","log_filename=postgresql-%Y-%m-%d_%H%M%S.log","-c","log_truncate_on_rotation=off","-c","log_rotation_age=1d","-c","logging_collector=on"]
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-1600353338-postgresql
                  key: rootPassword
            - name: PG_MULTI_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-1600353338-postgresql
                  key: multidbUserPassord
            - name: POSTGRES_USER
              value: postgres
            - name: PG_MULTI_DB_USER
              value: data
            - name: PG_MULTI_DB
              value: db1;db2
            - name: PGDATA
              value: "/data/pgdata"
          ports:
            - name: tcp
              containerPort: 5432
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - sh 
                - -c 
                - "pg_isready -U ${POSTGRES_USER}"
            initialDelaySeconds: 30
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                - sh 
                - -c 
                - "pg_isready -U ${POSTGRES_USER}"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          volumeMounts:
          - name: postgres-log
            mountPath: /var/log/postgres
          - name: data
            mountPath: /data
            subPath: pgdata
          - name: initconfig
            mountPath: /docker-entrypoint-initdb.d
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 128Mi
              
        # Busybox container to forward logs from postgres logfile to stdout so that they are picked up for parsing by snappyflow central log parser.     
        - name: postgres-general
          image: busybox
          command: ["/bin/sh", "-c"]
          args: ["tail -n+1 -f /var/log/postgres/postgres*.log"]
          volumeMounts:
            - name: postgres-log
              mountPath: /var/log/postgres
              
        # Snappyflow's sfkubeagent container to monitor the postres application. It gets its input from postgres-sfagent-config.yaml      
        - name: postgres-sfagent
          image: snappyflowml/sfagent:latest
          imagePullPolicy: Always
          command:
            - /app/sfagent
            - -config-file
            - /app/config.yaml
          env:
            - name: APP_NAME
              value: "testapp"
            - name: PROJECT_NAME
              value: "testproject"
          volumeMounts:
            - name: postgres-log
              mountPath: /var/log/postgres
            - name: postgres-sfagent-config
              mountPath: /app/config.yaml
              subPath: config.yaml
      volumes:
      - name: postgres-log
        emptyDir: {}
      - name: data
        persistentVolumeClaim:
          claimName: postgresql-1600353338-postgresql
      - name: initconfig
        configMap:
          name: postgresql-1600353338-postgresql-init
      - name: postgres-sfagent-config
        configMap:
          name: postgres-sfagent-config
